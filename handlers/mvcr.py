from aiogram import Router, types
# –ø–∞—Ä—Å–∏–Ω–≥
from bs4 import BeautifulSoup

# –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
from geopy.geocoders import Nominatim

from keyboards.mvcr_keyboard import *
from url.url_mvcr import *

# —Ñ–æ—Ç–æ
from photo import photo as ph
# from photo import photo_test as ph

router = Router()  # [1]

start_message0 = "–Ø <b>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π</b> –±–æ—Ç." \
                 "\n\n–í–æ—Ç –∫–∞—Ä—Ç–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π mvcr –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –ß–µ—Ö–∏–∏." \
                 "\n    <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é</i>"


@router.message(commands=['start'])
async def start(message: types.Message):
    # if not db.subscriber_exists(message.from_user.id):
    #     # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç,–¥–æ–±–∞–≤–ª—è–µ–º
    #     db.add_subscriber(message.from_user.id)
    # else:
    #     # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    #     db.update_subscription(message.from_user.id, True)
    markup = types.ReplyKeyboardRemove()
    user = message.from_user.first_name
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, <b>{user}</b>üëã", reply_markup=markup)
    await message.answer(start_message0,
                         reply_markup=start_keyboard())


@router.message(commands=['help'])
async def help_set(message: types.Message):
    text_help = "–ü–æ–ª—å–∑—É—è—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                "–æ <b>–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏</b> –∏ <b>–≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã</b> –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤ <b>(mvcr)</b>, " \
                "–∞ —Ç–∞–∫ –∂–µ <b>—Ü–µ–Ω—Ç—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</b> –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ß–µ—à—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏üá®üáø"
    await message.answer(text_help)


# –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é
@router.callback_query(text="MVCR_exit_call")
async def mvcr_exit(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    await callback.message.answer(start_message0,
                                  reply_markup=start_keyboard())
    await callback.message.delete()


# start / exit mvcr region hendler
@router.callback_query(text="MVCR_start_call")
async def mvcr_region_exit(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π <b>–∫—Ä–∞–π</b> –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É:",
                                  reply_markup=mvcr_keyboard())
    await callback.message.delete()


# —Ä–µ–≥–∏–æ–Ω—ã –ß–µ—Ö–∏–∏

# –Æ–∂–Ω–æ—á–µ—à—Å–∫–∏–π –∫—Ä–∞–π
@router.callback_query(text="JC_K0")
async def mvd_jk(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–Æ–∂–Ω–æ—á–µ—à—Å–∫–∏–π –∫—Ä–∞–π</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=jc_keyboard_mvcr())
    await callback.message.delete()


# exit JC hendler
@router.callback_query(text="JC_exit_call")
async def mvd_jk_exit(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–Æ–∂–Ω–æ—á–µ—à—Å–∫–∏–π –∫—Ä–∞–π</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=jc_keyboard_mvcr())
    await callback.message.delete()


# ƒåesk√© Budƒõjovice
@router.callback_query(text="JC_sity_k0")
async def mvd_cd(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>" \
           "\n–≥.–ß–µ—Å–∫–µ –ë—É–¥–µ–π–æ–≤–∏—Ü–µ (ƒåesk√© Budƒõjovice) " \
           "\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> " \
           "\n–ß–µ—Å–∫–µ-–ë—É–¥–µ–π–æ–≤–∏—Ü–µ, –ü—Ä–∞—Ö–∞—Ç–∏—Ü–µ –∏ –ß–µ—Å–∫–∏-–ö—Ä—É–º–ª–æ–≤ " \
           "\n(ƒåesk√© Budƒõjovice Prachatice a ƒåesk√Ω Krumlov)."
    await callback.message.answer_photo(ph.czBudevice_ph, text,
                                        reply_markup=jc_cb_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="cb_dk0")
async def location_cd(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(ceske_budejovice_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="cb_dk1")
async def location_gps_cd(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(ceske_budejovice_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="cb_dk2")
async def phone_cd(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(ceske_budejovice_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="cb_dk3")
async def working_time_cd(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(ceske_budejovice_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ø–∏—Å–µ–∫
@router.callback_query(text="JC_sity_k1")
async def mvd_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>" \
           "\n–≥.–ü–∏—Å–µ–∫ (P√≠sek) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b>" \
           "\n–ü–∏—Å–µ–∫ –∏ –°—Ç—Ä–∞–∫–æ–Ω–∏—Ü–µ\n(P√≠sek a Strakonice)."
    await callback.message.answer_photo(ph.pisek_ph, text,
                                        reply_markup=jc_pi_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pi_dk0")
async def location_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(pisek_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pi_dk1")
async def location_gps_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(pisek_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pi_dk2")
async def phone_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(pisek_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="pi_dk3")
async def working_time_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(pisek_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ô–∏–Ω–¥—Ä–∏—Ö—É–≤ –ì—Ä–∞–¥–µ—Ü
@router.callback_query(text="JC_sity_k2")
async def mvd_jg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ô–∏–Ω–¥—Ä–∏—Ö—É–≤ –ì—Ä–∞–¥–µ—Ü (Jind≈ôich≈Øv Hradec)" \
           "\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω:</b> \n–ô–∏–Ω–¥—Ä–∏—Ö—É–≤ –ì—Ä–∞–¥–µ—Ü\n(Jind≈ôich≈Øv Hradec)."
    await callback.message.answer_photo(ph.jindrichevHradec_ph, text,
                                        reply_markup=jc_jg_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="jg_dk0")
async def location_jg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(jindrichuv_hradec_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="jg_dk1")
async def location_gps_jg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(jindrichuv_hradec_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="jg_dk2")
async def phone_jg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(jindrichuv_hradec_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


# –±—Ä–Ω–æ
@router.callback_query(text="JC_K1")
async def mvd_jg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ë—Ä–Ω–æ (Brno)" \
           "\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> " \
           "\n–ë—Ä–Ω–æ-–≥–æ—Ä–æ–¥, –ë—Ä–Ω–æ-–í–µ–Ω–∫–æ–≤, –í—ã—à–∫–æ–≤, –ë–ª–∞–Ω—Å–∫–æ, –ë—Ä–∂–µ—Ü–ª–∞–≤, –ó–Ω–æ–π–º–æ –∏ –ì–æ–¥–æ–Ω–∏–Ω.\n(Brno-mƒõsto, " \
           "Brno-venkov, Vy≈°kov, Blansko, B≈ôeclav, Znojmo a Hodon√≠n)."
    await callback.message.answer_photo(ph.brno_ph, text,
                                        reply_markup=brno_keyboard_mvcr())
    await callback.message.delete()


brno_location = 'Cejl 62b, 602 00  Brno'


@router.callback_query(text="br_dk0")
async def location_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    await callback.message.answer(brno_location)


@router.callback_query(text="br_dk1")
async def location_gps_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    geolocator = Nominatim(user_agent="info_Czesh_bot")
    location = geolocator.geocode(brno_location)
    send_lat = location.latitude
    send_long = location.longitude
    await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="br_dk2")
async def phone_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(brno_url.text, "html.parser")
    find = phone_number.find(class_="c-block")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="br_dk3")
async def working_time_pi(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(brno_url.text, "html.parser")
    find = working_time.find_all(class_="c-block")
    for text in find:
        working_time = (text.getText().strip())
    await callback.message.answer(working_time)


# –ö–∞—Ä–ª–æ–≤–∞—Ä—Å–∫–∏–π
@router.callback_query(text="JC_K2")
async def mvd_ka(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã (Karlovy Vary) \n\n<b>C—Ñ–µ—Ä–∞ " \
           "–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> \n–•–µ–±, –ö–∞—Ä–ª–æ–≤—ã –í–∞—Ä—ã –∏ –°–æ–∫–æ–ª–æ–≤\n(Cheb, Karlovy Vary a Sokolov)."
    await callback.message.answer_photo(ph.karloviVary_ph, text,
                                        reply_markup=ka_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="ka_dk0")
async def location_ka(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(karlovy_vary_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="ka_dk1")
async def location_gps_ka(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(karlovy_vary_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="ka_dk2")
async def phone_ka(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(karlovy_vary_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="ka_dk3")
async def working_time_ka(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(karlovy_vary_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ö—Ä–∞–ª–æ–≤–µ–≥—Ä–∞–¥–µ—Ü–∫–∏–π
@router.callback_query(text="JC_K3")
async def mvd_hk(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ì—Ä–∞–¥–µ—Ü –ö—Ä–∞–ª–æ–≤–µ (Hradec Kr√°lov√©) " \
           "\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> \n–ì—Ä–∞–¥–µ—Ü –ö—Ä–∞–ª–æ–≤–µ, –†–∏—Ö–Ω–æ–≤ –Ω–∞–¥ –ö–Ω–µ–∂–Ω–æ–π –∏ –ô–∏—á–∏–Ω" \
           "\n(Hradec Kr√°lov√©, Rychnov nad Knƒõ≈ænou a Jiƒç√≠n)."
    await callback.message.answer_photo(ph.hradecKralove_ph, text,
                                        reply_markup=hk_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="hk_dk0")
async def location_hk(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(hradec_kralove_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="hk_dk1")
async def location_gps_hk(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(hradec_kralove_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="hk_dk2")
async def phone_hk(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(hradec_kralove_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="hk_dk3")
async def working_time_hk(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(hradec_kralove_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –õ–∏–±–µ—Ä–µ—Ü–∫–∏–π
@router.callback_query(text="JC_K04")
async def mvd_lb(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–õ–∏–±–µ—Ä–µ—Ü (Liberec)"
    await callback.message.answer_photo(ph.liberec_ph, text,
                                        reply_markup=lb_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="lb_dk0")
async def location_lb(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(liberec_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="lb_dk1")
async def location_gps_lb(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(liberec_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())[:34]
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="lb_dk2")
async def phone_lb(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(liberec_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="lb_dk3")
async def working_time_lb(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(liberec_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ú–æ—Ä–∞–≤—Å–∫–æ—Å–∏–ª–µ–∑—Å–∫–∏–π
@router.callback_query(text="JC_K5")
async def mvd_ms(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–ú–æ—Ä–∞–≤—Å–∫–æ—Å–∏–ª–µ–∑—Å–∫–∏–π –∫—Ä–∞–π</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=ms_keyboard_mvcr())
    await callback.message.delete()


# exit ms hendler
@router.callback_query(text="ms_exit_call")
async def mvd_ms_exit(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–ú–æ—Ä–∞–≤—Å–∫–æ—Å–∏–ª–µ–∑—Å–∫–∏–π –∫—Ä–∞–π</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=ms_keyboard_mvcr())
    await callback.message.delete()


# –æ—Å—Ç—Ä–∞–≤–∞
@router.callback_query(text="ms_sity_k0")
async def mvd_o(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–û—Å—Ç—Ä–∞–≤–∞ (Ostrava) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–û—Å—Ç—Ä–∞–≤–∞, –û–ø–∞–≤–∞ –∏ –ö–∞—Ä–≤–∏–Ω–∞\n(Ostrava, Opava a Karvin√°)."
    await callback.message.answer_photo(ph.ostrava_ph, text,
                                        reply_markup=ms_o_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="o_dk0")
async def location_o(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(ostrava_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="o_dk1")
async def location_gps_o(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(ostrava_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="o_dk2")
async def phone_o(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(ostrava_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="o_dk3")
async def working_time_o(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(ostrava_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –§—Ä–∏–¥–µ–∫-–ú–∏—Å—Ç–µ–∫
@router.callback_query(text="ms_sity_k1")
async def mvd_fm(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–§—Ä–∏–¥–µ–∫-–ú–∏—Å—Ç–µ–∫ (Fr√Ωdek-M√≠stek) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–§—Ä–∏–¥–µ–∫-–ú–∏—Å—Ç–µ–∫ –∏ –ù–æ–≤—ã–π –ô–∏—á–∏–Ω\n(Fr√Ωdek-M√≠stek –∏ Nov√Ω Jiƒç√≠n)."
    await callback.message.answer_photo(ph.frydekMistek_ph, text,
                                        reply_markup=ms_fm_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="fm_dk0")
async def location_fm(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(frydekMistek_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="fm_dk1")
async def location_gps_fm(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(frydekMistek_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="fm_dk2")
async def phone_fm(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(frydekMistek_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="fm_dk3")
async def working_time_fm(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(frydekMistek_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –û–ª–æ–º–æ—É—Ü–∫–∏–π
@router.callback_query(text="JC_K6")
async def mvd_ol(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ü—Ä—à–µ—Ä–æ–≤ (P≈ôerov) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–ü—Ä—à–µ—Ä–æ–≤, –û–ª–æ–º–æ—É—Ü, –ü—Ä–æ—Å—Ç–µ–π–æ–≤, –®—É–º–ø–µ—Ä–∫, –ï—Å–µ–Ω–∏–∫ –∏ –ë—Ä—É–Ω—Ç–∞–ª\n( " \
           "P≈ôerov, Olomouc, Prostƒõjov, ≈†umperk, Jesen√≠k a Brunt√°l)."
    await callback.message.answer_photo(ph.ICOlomoc_jpg, text,
                                        reply_markup=ol_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="ol_dk0")
async def location_ol(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(olomouc_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="ol_dk1")
async def location_gps_ol(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(olomouc_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())[:36]
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="ol_dk2")
async def phone_ol(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(olomouc_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="ol_dk3")
async def working_time_ol(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(olomouc_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ü–∞—Ä–¥—É–±–∏—Ü–∫–∏–π
@router.callback_query(text="JC_K7")
async def mvd_par(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ü–∞—Ä–¥—É–±–∏—Ü–µ (Pardubice) \n\n<b>C—Ñ–µ—Ä–∞ " \
           "–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> \n–•—Ä—É–¥–∏–º, –ü–∞—Ä–¥—É–±–∏—Ü–µ, –°–≤–∏—Ç–∞–≤—ã –∏ –£—Å—Ç–∏-–Ω–∞–¥-–û—Ä–ª–∏—Ü–∏\n(" \
           "Chrudim, Pardubice, Svitavy a √öst√≠ nad Orlic√≠)."
    await callback.message.answer_photo(ph.pardubice_ph, text,
                                        reply_markup=par_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="par_dk0")
async def location_par(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(pardubice_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="par_dk1")
async def location_gps_par(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(pardubice_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="par_dk2")
async def phone_par(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(pardubice_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="par_dk3")
async def working_time_par(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(pardubice_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ü–ª—å–∑–µ–Ω—Å–∫–∏–π
@router.callback_query(text="JC_K8")
async def mvd_pl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ü–ª–∑–µ–Ω—å (Plze≈à) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–ü–ª—å–∑–µ–Ω—å-–≥–æ—Ä–æ–¥, –ü–ª—å–∑–µ–Ω—å-–Æ–≥, –ü–ª—å–∑–µ–Ω—å-–°–µ–≤–µ—Ä, –¢–∞—Ö–æ–≤, –†–æ–∫–∏—Ü–∞–Ω—ã, –ö–ª–∞—Ç–æ–≤—ã –∏ –î–æ–º–∞–∂–ª–∏—Ü–µ\n(" \
           "Plze≈à-mƒõsto, Plze≈à-jih, Plze≈à-sever, Tachov, Rokycany, Klatovy a Doma≈ælice)."
    await callback.message.answer_photo(ph.plzen_ph, text,
                                        reply_markup=pl_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pl_dk0")
async def location_pl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(plzen_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pl_dk1")
async def location_gps_pl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(plzen_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pl_dk2")
async def phone_pl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(plzen_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="pl_dk3")
async def working_time_pl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(plzen_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ü—Ä–∞–≥–∞
@router.callback_query(text="JC_K9")
async def mvd_pr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–ü—Ä–∞–≥–∞</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=prag_keyboard_mvcr())
    await callback.message.delete()


# exit praga hendler
@router.callback_query(text="prag_exit_call")
async def mvd_pr_exit(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–ü—Ä–∞–≥–∞</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=prag_keyboard_mvcr())
    await callback.message.delete()


# –ø—Ä–∞–≥–∞1
@router.callback_query(text="Pr_sity_k0")
async def mvd_pr1(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ\n–æ—Ç–¥. " \
           "–ü—Ä–∞–≥–∞ I (Praha I) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> \n–ü—Ä–∞–≥–∞-–í–æ—Å—Ç–æ–∫, –ü—Ä–∞–≥–∞-–ó–∞–ø–∞–¥, " \
           "–ü—Ä–∞–≥–∞ 1, 2, 3, 6, 7 \n–ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∑–∞–ø–∏—Å–∏ –ü—Ä–∞–≥–∞ 8 –∏ 9" \
           "\n(Praha-V√Ωchod, Praha-Z√°pad, Praha 1, 2, 3, 6, 7 \nneobjednan√≠ klienti Praha 8 a 9)."
    await callback.message.answer_photo(ph.praha_ph, text,
                                        reply_markup=pr1_cb_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pr1_dk0")
async def location_pr1(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(prague1_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pr1_dk1")
async def location_gps_pr1(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(prague1_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pr1_dk2")
async def phone_pr1(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(prague1_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="pr1_dk3")
async def working_time_pr1(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(prague1_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ø—Ä–∞–≥–∞2
@router.callback_query(text="Pr_sity_k1")
async def mvd_pr2(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–æ—Ç–¥. –ü—Ä–∞–≥–∞ II (" \
           "Praha II)\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> \n–ü—Ä–∞–≥–∞ 4, 5 a 10\n(" \
           "Praha 4, 5 a 10)."
    await callback.message.answer_photo(ph.praha_ph, text,
                                        reply_markup=pr2_cb_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pr2_dk0")
async def location_pr2(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(prague2_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pr2_dk1")
async def location_gps_pr2(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(prague2_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pr2_dk2")
async def phone_pr2(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(prague2_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="pr2_dk3")
async def working_time_pr2(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(prague2_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ø—Ä–∞–≥–∞3
@router.callback_query(text="Pr_sity_k2")
async def mvd_pr3(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b>\n–æ—Ç–¥. –ü—Ä–∞–≥–∞ III " \
           "\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>" \
           "\n–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–µ –≤ –ü—Ä–∞–≥–µ, —Ä–∞–π–æ–Ω—ã:\n" \
           "–ü—Ä–∞–≥–∞-–í–æ—Å—Ç–æ–∫ –∏ –ü—Ä–∞–≥–∞-–ó–∞–ø–∞–¥\n(Prahy-V√Ωchod, Prahy-Z√°pad)"
    await callback.message.answer_photo(ph.praha_ph, text,
                                        reply_markup=pr3_cb_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pr3_dk0")
async def location_pr3(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(prague3_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pr3_dk1")
async def location_gps_pr3(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(prague3_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pr3_dk2")
async def phone_pr3(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(prague3_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="pr3_dk3")
async def working_time_pr3(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(prague3_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ø—Ä–∞–≥–∞_letna
@router.callback_query(text="Pr_sity_k3")
async def mvd_pr4(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>" \
           "\n<i>–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –†–ê–ë–û–ß–ï–ï –ú–ï–°–¢–û - –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞</i>" \
           "\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> \n<i>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</i>"
    await callback.message.answer_photo(ph.praha_ph, text,
                                        reply_markup=pr4_cb_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pr4_dk0")
async def location_pr4(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(prague_letna_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pr4_dk1")
async def location_gps_pr4(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(prague_letna_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pr4_dk2")
async def working_time_pr4(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(prague_letna_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# —Å—Ä–µ–¥–Ω–µ—á–µ—à—Å–∫–∏–π
@router.callback_query(text="JC_K10")
async def mvd_sr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–°—Ä–µ–¥–Ω–µ—á–µ—à—Å–∫–∏–π –∫—Ä–∞–π</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=sk_keyboard_mvcr())
    await callback.message.delete()


# exit —Å—Ä–µ–¥–Ω–µ—á–µ—à—Å–∫–∏–π hendler
@router.callback_query(text="sk_exit_call")
async def mvd_sr_exit(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–°—Ä–µ–¥–Ω–µ—á–µ—à—Å–∫–∏–π –∫—Ä–∞–π</b>, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã:"
    await callback.message.answer(text,
                                  reply_markup=sk_keyboard_mvcr())
    await callback.message.delete()


# –ë–µ–Ω–µ—à–æ–≤
@router.callback_query(text="sk_sity_k0")
async def mvd_be(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ë–µ–Ω–µ—à–æ–≤ (Bene≈°ov) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–ë–µ–Ω–µ—à–æ–≤ –∏ –¢–∞–±–æ—Ä\n(Bene≈°ov a T√°bor)."
    await callback.message.answer_photo(ph.benesov_ph, text,
                                        reply_markup=sk_be_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="be_dk0")
async def location_be(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(benesov_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="be_dk1")
async def location_gps_be(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(benesov_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="be_dk2")
async def phone_be(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(benesov_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="be_dk3")
async def working_time_be(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(benesov_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ö–ª–∞–¥–Ω–æ
@router.callback_query(text="sk_sity_k1")
async def mvd_kl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ö–ª–∞–¥–Ω–æ (Kladno) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–ö–ª–∞–¥–Ω–æ –∏ –†–∞–∫–æ–≤–Ω–∏–∫\n(" \
           "Kladno, Rakovn√≠k)."
    await callback.message.answer_photo(ph.kladno_ph, text,
                                        reply_markup=sk_kl_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="kl_dk0")
async def location_kl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(kladno_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="kl_dk1")
async def location_gps_kl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(kladno_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="kl_dk2")
async def phone_kl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(kladno_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="kl_dk3")
async def working_time_kl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(kladno_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ö—É—Ç–Ω–∞ –≥–æ—Ä–∞
@router.callback_query(text="sk_sity_k2")
async def mvd_kg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ö—É—Ç–Ω–∞ –ì–æ—Ä–∞ (Kutn√° Hora) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b> \n–ö—É—Ç–Ω–∞ –ì–æ—Ä–∞, –ù–∏–º–±—É—Ä–∫ –∏ –ö–æ–ª–∏–Ω\n(" \
           "Kutn√° Hora, Nymburk, Kol√≠n)."
    await callback.message.answer_photo(ph.kutnaHora_ph, text,
                                        reply_markup=sk_kg_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="kg_dk0")
async def location_kg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(kutna_hora_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="kg_dk1")
async def location_gps_kg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(kutna_hora_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="kg_dk2")
async def phone_kg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(kutna_hora_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="kg_dk3")
async def working_time_kg(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(kutna_hora_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –º–ª–∞–¥–∞ –±–æ–ª–µ—Å–ª–∞–≤
@router.callback_query(text="sk_sity_k3")
async def mvd_m(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ú–ª–∞–¥–∞-–ë–æ–ª–µ—Å–ª–∞–≤ (Mlad√° Boleslav) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã: </b>\n–ú–ª–∞–¥–∞-–ë–æ–ª–µ—Å–ª–∞–≤ –∏ –ú–µ–ª—å–Ω–∏–∫\n(" \
           "Mlad√° Boleslav, Mƒõln√≠k)."
    await callback.message.answer_photo(ph.mladaBoleslav_ph, text,
                                        reply_markup=sk_m_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="m_dk0")
async def location_m(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(mlada_boleslav_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="m_dk1")
async def location_gps_m(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(mlada_boleslav_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="m_dk2")
async def phone_m(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(mlada_boleslav_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="m_dk3")
async def working_time_m(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(mlada_boleslav_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –ø—Ä—à–∏–±—Ä–∞–º
@router.callback_query(text="sk_sity_k4")
async def mvd_pr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–ü—Ä—à–∏–±—Ä–∞–º (P≈ô√≠bram) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b>\n–ë–µ—Ä–æ—É–Ω –∏ –ü—Ä—à–∏–±—Ä–∞–º\n(" \
           "Beroun, P≈ô√≠bram)."
    await callback.message.answer_photo(ph.pribram_ph, text,
                                        reply_markup=sk_pr_details_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="pr_dk0")
async def location_pr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(pribram_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="pr_dk1")
async def location_gps_pr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(pribram_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="pr_dk2")
async def phone_pr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(pribram_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="pr_dk3")
async def working_time_pr(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(pribram_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –£—Å—Ç–µ—Ü–∫–∏–π
# —É—Å—Ç–∏ –Ω–∞–¥ –ª–∞–±–µ–º
@router.callback_query(text="JC_K11")
async def mvd_unl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>\n–≥.–£—Å—Ç–∏-–Ω–∞–¥-–õ–∞–±–µ–º (√öst√≠ nad Labem) \n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, " \
           "—Ä–∞–π–æ–Ω—ã:</b>\n–£—Å—Ç–∏-–Ω–∞–¥-–õ–∞–±–µ–º, –¢–µ–ø–ª–∏—Ü–µ, –õ–∏—Ç–æ–º–µ—Ä–∂–∏—Ü–µ –∏ –î–µ—á–∏–Ω\n(" \
           "√öst√≠ nad Labem, Teplice, Litomƒõ≈ôice, Dƒõƒç√≠n)."
    await callback.message.answer_photo(ph.ustiNadLabem_ph, text,
                                        reply_markup=ust_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="unl_dk0")
async def location_unl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(usti_nad_labem_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="unl_dk1")
async def location_gps_unl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(usti_nad_labem_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="unl_dk2")
async def phone_unl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(usti_nad_labem_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="unl_dk3")
async def working_time_unl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(usti_nad_labem_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –±–æ–≥–µ–º–∏—è
# –ô–∏–≥–ª–∞–≤–∞
@router.callback_query(text="JC_K12")
async def mvd_vys(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ –¥–µ–ª–∞–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤ –í—ã—Å–æ—á–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞:</b>" \
           "\n–≥.–ô–∏–≥–ª–∞–≤–∞(Jihlava)" \
           "\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω—ã:</b> \n–ì–∞–≤–ª–∏—á–∫—É–≤ –ë—Ä–æ–¥, –ô–∏–≥–ª–∞–≤–∞, –¢—Ä—à–µ–±–∏—á," \
           "–ü–µ–ª—å–≥—Ä–∂–∏–º–æ–≤ –∏ –ñ–∞—Ä–∞—Ä-–Ω–∞–¥-–°–∞–∑–∞–≤–æ–π\n(Havl√≠ƒçk≈Øv Brod, Jihlava, T≈ôeb√≠ƒç, Pelh≈ôimov a ≈Ωƒè√°r nad " \
           "S√°zavou)."
    await callback.message.answer_photo(ph.jihlava_ph, text,
                                        reply_markup=vys_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="vys_dk0")
async def location_vys(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(jihlava_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="vys_dk1")
async def location_gps_vys(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(jihlava_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="vys_dk2")
async def phone_vys(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(jihlava_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="vys_dk3")
async def working_time_vys(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(jihlava_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)


# –∑–ª–∏–Ω—Å–∫–∏–π
# –∑–ª–∏–Ω
@router.callback_query(text="JC_K13")
async def mvd_zl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    text = "<b>–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤:</b>" \
           "\n–≥.–ó–ª–∏–Ω(Zlin)\n\n<b>C—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> \n–≤–µ—Å—å —Ä–µ–≥–∏–æ–Ω."
    await callback.message.answer_photo(ph.zlin_ph, text,
                                        reply_markup=zlin_keyboard_mvcr())
    await callback.message.delete()


@router.callback_query(text="zl_dk0")
async def location_zl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location = BeautifulSoup(zlin_url.text, "html.parser")
    find = location.find_all(class_="detailAddress")
    for text in find:
        location = (text.getText().strip())
        await callback.message.answer(location)


@router.callback_query(text="zl_dk1")
async def location_gps_zl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    location_gps = BeautifulSoup(zlin_url.text, "html.parser")
    find = location_gps.find_all(class_="detailAddress")
    for text in find:
        location_gps = (text.getText().strip())
        geolocator = Nominatim(user_agent="info_Czesh_bot")
        location = geolocator.geocode(location_gps)
        send_lat = location.latitude
        send_long = location.longitude
        await callback.message.answer_location(send_lat, send_long)


@router.callback_query(text="zl_dk2")
async def phone_zl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    phone_number = BeautifulSoup(zlin_url.text, "html.parser")
    find = phone_number.find(class_="value detailPhone detailPhonePrimary")
    for text in find:
        phone_number = (text.getText().strip())
    await callback.message.answer(phone_number)


@router.callback_query(text="zl_dk3")
async def working_time_zl(callback: types.CallbackQuery):
    await callback.answer(cache_time=1)
    working_time = BeautifulSoup(zlin_url.text, "html.parser")
    find = working_time.find(class_="today")
    for text in find:
        working_time = (text.getText().strip())
    text_today = f"C–µ–≥–æ–¥–Ω—è:" \
                 f"\n        <b>{working_time}</b>"
    await callback.message.answer(text_today)

